 == 스프링툴슈트 다운로드 사이트 ==
 https://spring.io/tools

 https://spring.io/tools#suite-three
  
 
 - 스프링툴슈트(STS)를 다운받아서 실행시킨다.
   우리는 spring-tool-suite-3.9.13.RELEASE-e4.16.0-win32-x86_64.zip 을 다운받아 실행시킴.

 - Workspace 는 각자 마음대로 해도 되지만 수업시간에는 C:\NCS\workspace(spring) 로 한다.

 
 1. Maven 관련 웹사이트

   http://maven.apache.org : 메이븐 공식 사이트

   *** 라이브러리 검색(자주 방문해서 사용할 일이 많은 사이트) ***
   http://search.maven.org  
   https://mvnrepository.com/ 
   https://code.lds.org/nexus/#browse/search/maven  오라클 ojdbc6.jar 다운로드는 여기서함.

 - Maven 세팅은 설치 경로만 확인할것(수정할 일 없음)
 2. 메뉴 Window > Preferences > Maven > User Settings > User Settings : Local Repository 경로(C:\Users\사용자\.m2\repository : 메이븐이 다운로드 받은 라이브러리가 저장되는 폴더)

 3. STS를 UTF-8 상태로 변경한다.(이전에 이클립스에서 한것과 동일함.) 

 4. Ctrl + Alt + Shift + L : 찾기(검색) 기능 (== Ctrl + F)

 5. Spring 프로젝트 생성
    - STS를 사용하여 프로젝트를 만드는 방법에 대해 살펴본다. 
      STS는 Spring Framework 관련 프로젝트 템플릿이 몇 종류가 준비되어 있다. 
      크게 나누면 "Spring Legacy Project"와"Spring Starter Project "로 분류가 가능하다. 
      이것은 다음과 같은 차이가 있다.

      ==> Spring Legacy Project : 일반적인 Spring Framework 프로젝트이다. 
                                  필요에 따라 Spring Framework의 라이브러리를 내장하여 이용한다.

      ==> Spring Starter Project : Spring Boot라는 응용 프로그램의 빠른 개발 프레임워크를 이용한 프로젝트이다. 
                                   간단한 라이브러리를 추가하는 것만으로 필요한 프레임워크들이 모두 포함할 수 있도록 되어 있다.


      Spring Framework의 기본을 배우는 것에는, "Spring Legacy Project"를 사용한다. 
      Spring Starter Project는 Spring Boot위한 것이므로, 이것은 Spring Boot를 이용하게 될때 사용하는 것으로 하도록 하자.

      메뉴 File ==> New ==> Spring Legacy Project  
      ==> Project name(프로젝트명) 입력 : Board
          Location 은 자동적으로 Workspace 경로인 C:\NCS\workspace(spring)\Board 로 잡힌다. 
          Templates: (아래에 내려가서) "Spring MVC Project" 에 클릭하고서 Next 버튼을 클릭한다.
      ==> Spring MVC Project requires a download of 16608 byte. Proceed? 대화상자가 나온다 Yes 버튼을 클릭한다. 
      ==> top-level package (기본 패키지명) 입력(3단계 이상 권장. 일반적으로 회사도메인명.컨텍스트명으로 함)
          우리는 com.spring.board 라고 입력하고 Finish 버튼을 클릭한다. 
          처음에는 프로젝트에 빨간딱지 표시가된 error 표시가 나타나지만 메이븐에서 기본적인 .jar 파일을 다운받고 있는 중이므로 
          그냥 가만히 있는다. 약 1~2분만 지나면 다운이 다 이루어지므로 그때는 프로젝트에 빨간딱지 표시가 사라져 error 표시가 없어진다. 
          그러므로 프로젝트에 빨간딱지 표시가 없어질때 까지 그냥 가만히 기다리자.


 6. WAS는 기본으로 설치되는 VMware tc Server Developer Edition v4.1 을 마우스 우클릭하여 삭제한다.
    아래처럼 Tomcat v8.5 Server at localhost 를 설치한다. 
    메뉴 Window ==> Preferences ==> Server ==> Runtime Environments ==> VMware tc Server Developer Edition v4.1 을 Remove 한다
    이어서 Add 를 클릭 ==> Apache Tomcat v8.5 에 클릭 Next ==> Tomcat installation directory 에 톰캣이 설치된 경로인 C:\apache-tomcat-8.5.54 으로 설정한다.
    이어서 JRE 는 JDK 가 설치된 경로인 jdk1.8.0_251 로 설정하고서 Finish 버튼을 클릭한다.  
    Apply and Close 를 클릭하여 Preferences 창을 닫는다.
    
    WAS 에서 No servers are available. Click this link to create a new server.. 을 클릭하여 Tomcat v8.5 Server 로 설정한후 Board 프로젝트를 추가(Add)하고 Finish 를 클릭한다.
    중요한 것은 여기서 WAS 의 상태는 start 하지 말고 stop 인 상태로 그대로 두어야 한다.


 7. Spring MVC 프로젝트 버전3 에서 버전 4로 마이그레이션 하기

  >>>> Spring MVC 프로젝트 버전3 에서 버전 4로 마이그레이션 하기 <<<<<

  Spring MVC 프로젝트의 Spring Framework 버전의 기본값은 3.1.1 이다. 이것을 4.3.4 버전으로 변경하도록 한다. 
 
  ==> 기본 환경                   ==> 변경 될 환경

  - Spring Framework 3.1.1        - Spring Framework 4.3.4
  - java version 1.6              - java version 1.8  (JDK 1.8.0_x 을 사용하므로)
  - Maven compiler                - Maven compiler
    source 1.6                      source 1.8
    target 1.6                      target 1.8
  - servlet-api 2.5               - servlet-api 3.1.0   (apache-tomcat-8.5.x 을 사용하므로)  
  - jsp-api 2.1                   - jsp-api 2.3.1       (apache-tomcat-8.5.x 을 사용하므로)


 [8-1]. 프로젝트(Board)를 열면 아래에 보이는 pom.xml 파일을 열어서 설정을 변경한다.

        POM(Project Object Model)은 프로젝트(우리의 프로젝트는 Board임)의 구조와 내용을 설명하고 있는 것으로써, 
        pom.xml 파일에 프로젝트 관리 및 빌드(build)에 필요한 환경 설정, 의존성 관리 등의 정보들을 기술해둔다.
     

      - 빌드(build)란?
        소스코드 파일을 컴퓨터에서 실행할 수 있는 독립 소프트웨어 가공물로 변환하는 과정 또는 그에 대한 결과물 이다.
        우리가 작성한 소스코드(java) 와 프로젝트에서 사용되는 각각의 파일 및 자원 등(.js, .css, .jpg, .xml, .jar, .properties)을 
        JVM(Java Virtual Machine)이나 톰캣같은 WAS가 인식할 수 있는 구조로 변환하여 패키징 하는 과정 및 결과물을 빌드(build)라고 부른다.

      - 빌드(build) 도구란?
        프로젝트 생성, 테스트 빌드, 배포 등의 작업을 위한 전용 프로그램이다.
      
      - 빌드(build) 도구의 등장배경 
        짧은 기간동안 계속해서 늘어나는 라이브러리의 추가 및 프로젝트를 진행하는 동안 라이브러리의 버전 동기화의 어려움을 해소하고자 등장함.
 
      - 빌드(build) 도구의 종류
        초기의 java 빌드도구로 Ant를 많이 사용하였으나 이후로 많은 빌드도구들이 생겨났으나 그 중에서 Maven(메이븐)을 가장 많이 사용하게 되었음.
        현재는 Gradle을 사용하기도 함.


      - 이 pom.xml 파일은 빌드(build) 도구인 Maven(메이븐)을 사용해서 프로젝트를 관리해주는 환경설정 파일이다.
	특히 pom.xml 파일은 Maven(메이븐)을 통해서 각종 라이브러리(*.jar)를 프로젝트에 다운로드 하는 것이 가장 큰 목적이다.
        프로젝트에 필요한 라이브러리(*.jar)의 관리는 모두 pom.xml에서 관리한다.
        Maven 관련 웹사이트에 가보면 라이브러리(*.jar)들은 xml 태그 형태 "<dependency></dependency>"로 라이브러리(*.jar)들을 추가할 수 있도록 되어있다.
        프로젝트를 운용하는데 필요한 각종 라이브러리(*.jar)를 <dependency> 태그를 사용해서 pom.xml에 붙여 넣으면 자동으로 Maven Dependencies에 *.jar 라이브러리들을 추가해준다.      
        이 라이브러리(*.jar)들은 기본적으로 C:\Users\사용자\.m2\repository 에 저장되어진다.

      - 만약에 pom.xml 파일에 <dependency></dependency> 태그를 붙여 라이브러리(*.jar)들을 다운받으려 하는데 
        인터넷에서 다운로드가 제대로 안되어 에러가 발생하면 "무조건 STS 를 종료" 한 후 
        탐색기에 가서 C:\Users\사용자\.m2\repository 내의 모든 폴더(파일)를 삭제하고서 STS 를 다시 실행하면 된다.

  
  ===> 그러면 pom.xml 파일을 열어서 설정을 아래처럼 변경하도록 한다.

 [8-2]. java version을 1.6 에서 1.8 로 변경하고, springframework 버전을 3.1.1을 4.3.4 로 변경한다.

  <properties>
      <java-version>1.8</java-version>
      <org.springframework-version>4.3.4.RELEASE</org.springframework-version>
      <org.aspectj-version>1.6.10</org.aspectj-version>
      <org.slf4j-version>1.6.6</org.slf4j-version>
  </properties>


  [8-3]. Servlet api 버전을 2.5 에서 3.1.0 로 변경한다.   
         여기에서는 artifactId 도 servlet-api 에서 javax.servlet-api 로 변경한다.

  <!-- Servlet -->
  <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
  </dependency>


  [8-4]. jsp api 버전을 2.1에서 2.3.1로 변경한다.
         여기에서는 artifactId 도 jsp-api 에서 javax.servlet.jsp-api 로 변경한다.

  <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>javax.servlet.jsp-api</artifactId>
      <version>2.3.1</version>
      <scope>provided</scope>
  </dependency>


  [8-5]. maven-compiler-plugin 설정에서 소스와 타겟을 1.6 에서 ${java-version} 또는 1.8로 변경한다.

  <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <version>2.5.1</version>   
      <configuration>
          <source>${java-version}</source>
          <target>${java-version}</target>
          <compilerArgument>-Xlint:all</compilerArgument>
         <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
      </configuration>
  </plugin>


 [8-6]. pom.xml 파일을 저장한다. 이때 우측하단부에 다운받는 표시가 나오는데 모두 완료될때 까지 기다리도록 한다.  


  9. 이제 프로젝트 설정을 수정하기 위해서 프로젝트(Board) 오른쪽 버튼 클릭해서 Properties 를 선택한다.

 10. Java Build Path 를 선택한후 Libraries 탭에서 JRE System Library[JavaSE-1.6] 에 클릭하고 Edit 버튼을 클릭하여
      Workspace default JRE (jdk1.8.0_271)으로 변경하고 Finish 버튼을 클릭하고 Apply 를 클릭한다.

 11. Java Compiler 설정에서 Compiler compliance level 을 1.8로 지정한다. 
     Build Path 가 잘 설정되었다면 Compiler compliance level 이 1.8이 되어 있을 것이다.
     Apply 를 클릭한다. Compiler Setting Changed 창이 보이면 Yes 를 클릭한다.

 12. Project Facets에서 Dynamic Web Module 2.5를 3.1 으로 변경하고, java 1.6은 1.8로 변경한다. 
     Apply 를 클릭한다. 이어서 Apply and Close 버튼을 클릭하여 창을 닫는다.
     
     만약에 설정변경이 안되는 경우가 있다라면... 
     이 때는 STS를 종료한 후 프로젝트(Board) 폴더아래 .settings 폴더에 있는 
     org.eclipse.wst.common.project.facet.core.xml 파일을 텍스트 에디터로 열어서 
     직접 수정한 후 STS를 실행하고 다시 변경하면 된다.

-------------------------------------------------------------------------------------------------------------------------------------

 13. >>>> 오류 Cannot change version of project facet Dynamic Web Module to 3.0. 이 발생할 수 있으므로 아래와 같이 하도록 한다 <<<<
    
   해결책 : /프로젝트명(Board)/src/main/webapp/WEB-INF/web.xml 파일을 열어서 아래처럼 변경한다.

   <?xml version="1.0" encoding="UTF-8"?>
   <web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
        

------------------------------------------------------------------------------------------------------------   

 14.  >>>> /프로젝트명(Board)/src/main/webapp/WEB-INF/spring/root-context.xml 파일 수정하기 <<<<<

  ==> 파일뒤에 숫자는 모두 제거한다. 숫자를 제거한 것이 최신파일인 것이다.
  ==> 그리고 내용이 조금 바뀌었으므로 그대로 복사해서 사용하도록 한다.

 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"> 

------------------------------------------------------------------------------------------------------------

 15. >>>>  /프로젝트명(Board)/src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 파일 수정하기 <<<<<

 ==> 파일뒤에 숫자는 모두 제거한다. 숫자를 제거한 것이 최신파일인 것이다.
 ==> 그리고 내용이 조금 바뀌었으므로 그대로 복사해서 사용하도록 한다.

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

 <annotation-driven /> 을
 <mvc:annotation-driven /> 으로 변경한다.

 <resources mapping="/resources/**" location="/resources/" /> 을
 <mvc:resources mapping="/resources/**" location="/resources/" />  으로 변경한다.


  16. 프로젝트명(Board)에 마우스 우클릭하여 
      Maven -> Update Project... 를 클릭해서 Update Maven Project 창에서 OK 버튼을 클릭하여 설정 내용을 적용한다. 
      이것은 1번만 하면 되므로 이 이후로는 할 필요가 없다.  
      우측 하단부에 설정적용이 100% 가 될 때까지 기다리도록 한다.  
      
      이제 모든 설정이 적용되었다. 
      프로젝트명에 빨간색이 없고, 하단의  Problems 탭에 아무 내용도 없어야 한다. 
      물론 실행시켜도 잘 동작해야 한다. 추가로 적용 도중에 다음과 같은 에러가 발생했었다.


 >>>> 오류  
 Description	Resource	Path	Location	Type
 The container 'Maven Dependencies' references non existing library 'C:\Users\사용자명\.m2\repository\org\springframework\spring-context\4.3.4.RELEASE\spring-context-4.3.4.RELEASE.jar'	Board		Build path	Build Path Problem

 https://mvnrepository.com/

 jar 파일이 다운로드 되기는 했지만, 잘못된 파일이라는 내용이 나오더군요. 
 여기저기 찾아보니 여러가지 해결책이 있었지만, 
 나의 경우 해결할 수 있었던 방법은 STS를 종료하고, 
 탐색기에서 사용자 폴더 아래 maven 로컬 리포지토리 (C:\Users\사용자명\.m2\repository\ 안의 모든폴더)를 삭제하고,
 STS를 다시 시작한 후 Maven -> Update Project 를 다시 실행하니 해결이 되었다.
 

 17. Tomcat v8.5 Server at localhost 를 start 시킨다.
     방화벽 차단 창이 뜨면 체크박스에 모두 체크를 한 후 액세스허용 버튼을 클릭한다.

--------------------------------------------------------------------------------------------------------------

 <Dynamic Web Project 구조>
 1. src	- 자바 리소스

 2. WebContent(웹 리소스 루트 폴더)
	- 웹 리소스
	- 브라우저로 접근 가능 루트 디렉토리


 <Spring MVC Project 구조>
 1. src/main/java - 자바 리소스

 2. src > main > webapp(웹 리소스 루트 폴더)
	- 웹 리소스
	- 브라우저로 접근 가능 루트 디렉토리


-------------------------------------------------------------------------------------------------------------- 
